from superagi.tools.base_tool import BaseTool
from pydantic import BaseModel, Field
from typing import Type


class VulnerablilityCheckerInput(BaseModel):
    library: str = Field(..., description="Library to check for vulnerability")
    version: str = Field(..., description="Library version")

class VulnerabilityCheckerOutput(BaseModel):
    is_vulnerable: bool = Field(description="Tells if the library is vulnerable")
    description: str = Field(..., description="Description of the vulnerability")

class VulnerabilityCheckerTool(BaseTool):
    """
    Vulnerability Checker Tool to detect if a library introduces vulnerability
    """
    name: str = "Vulnerable Library Tool"
    args_schema: Type[BaseModel] = VulnerablilityCheckerInput
    description: str = "Vulnerability Checker Tool to detect if a library has vulnerability"

    def _execute(self, library: str, version: str):
        """
        Executes the tool (TODO)
        """
        is_vulnerable = True
        description = ""
        return VulnerabilityCheckerOutput(is_vulnerable=is_vulnerable, description=description)